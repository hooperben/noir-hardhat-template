// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "./ConnectivityVerifier.sol";

/// @title Connectivity.sol
/// @author benhooper.eth
/// @notice The demo contract for this repository
contract Connectivity {
  // the verifier contract (generated by running nargo codegen-verifier)
  ConnectivityVerifier public verifier;

  // tracking all used proofs
  mapping(bytes32 => bool) public usedProofs;

  // the constructor takes the address of the verifier contract
  constructor(address _verifier) {
    verifier = ConnectivityVerifier(_verifier);
  }

  // the submitProof function takes a proof and verifies it using our deployed verifier contract
  function submitProof(
    bytes calldata _proof,
    bytes32[] calldata _publicInputs
  ) public {
    // verify the proof - if invalid, the transaction will revert
    require(verifier.verify(_proof, _publicInputs), "Proof is invalid");

    // hash the proof and store it
    bytes32 proofHash = keccak256(_proof);
    usedProofs[proofHash] = true;

    // ... this is where you'd call your contract logic
  }

  // helper function used to determine if a proof has been used or not
  function isProofUsed(bytes32 _proof) public view returns (bool) {
    return usedProofs[_proof];
  }
}
